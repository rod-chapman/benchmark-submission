;; produced by cvc4_16_smtcomp.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVDTNIA)
(set-info :source |
Generated by: Rod Chapman
Generated on: 2024-02-26
Generator: GNATProve 13.2.1 and Why3 1.5.0
Application: Proof of LibMLKEM Cryptographic Library
Target solver: CVC4, CVC5, Z3
Publications: https://github.com/awslabs/LibMLKEM
|)
(set-info :license "https://www.apache.org/licenses/LICENSE-2.0")
(set-info :category "industrial")
(set-info :status unsat)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

;; nth
(declare-fun nth ((_ BitVec 8)
  Int) Bool)

;; lsr
(declare-fun lsr ((_ BitVec 8)
  Int) (_ BitVec 8))

;; asr
(declare-fun asr ((_ BitVec 8)
  Int) (_ BitVec 8))

;; lsl
(declare-fun lsl ((_ BitVec 8)
  Int) (_ BitVec 8))

;; abs
(define-fun abs1 ((x Int)) Int
  (ite (<= 0 x) x (- x)))

;; Abs_le
(assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
(assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
(assert
  (forall ((x Int) (y Int) (q Int))
    (=>
      (< 0 y)
      (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
(assert
  (forall ((x Int) (y Int))
    (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
(assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
(assert
  (forall ((y Int))
    (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

;; pow2
(declare-fun pow2 (Int) Int)

(declare-const two_power_size_minus_one Int)

;; two_power_size_minus_one_val
(assert (= two_power_size_minus_one (pow2 (- 8 1))))

;; to_int
(define-fun to_int1 ((x (_ BitVec 8))) Int
  (ite (bvsge x (_ bv0 8)) (bv2nat x) (- (- 256 (bv2nat x)))))

;; lsr_bv_is_lsr
(assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
    (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
(assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
    (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
(assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
    (= (bvshl x n) (lsl x (bv2nat n)))))

;; nth_bv
(declare-fun nth_bv ((_ BitVec 8)
  (_ BitVec 8)) Bool)

;; nth_bv_def
(assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
    (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
(assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
    (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
(assert
  (forall ((x (_ BitVec 8)) (i Int))
    (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

;; min
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; max
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; Min_r
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

;; nth
(declare-fun nth1 ((_ BitVec 16)
  Int) Bool)

;; lsr
(declare-fun lsr1 ((_ BitVec 16)
  Int) (_ BitVec 16))

;; asr
(declare-fun asr1 ((_ BitVec 16)
  Int) (_ BitVec 16))

;; lsl
(declare-fun lsl1 ((_ BitVec 16)
  Int) (_ BitVec 16))

(declare-const two_power_size_minus_one1 Int)

;; two_power_size_minus_one_val
(assert (= two_power_size_minus_one1 (pow2 (- 16 1))))

;; to_int
(define-fun to_int2 ((x (_ BitVec 16))) Int
  (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))

;; lsr_bv_is_lsr
(assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
    (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
(assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
    (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
(assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
    (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; nth_bv
(declare-fun nth_bv1 ((_ BitVec 16)
  (_ BitVec 16)) Bool)

;; nth_bv_def
(assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
    (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))

;; Nth_bv_is_nth
(assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
    (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
(assert
  (forall ((x (_ BitVec 16)) (i Int))
    (=>
      (and (<= 0 i) (< i 65536))
      (= (nth_bv1 x ((_ int2bv 16) i)) (nth1 x i)))))

(declare-sort u8_bit 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

;; in_range
(define-fun in_range ((x (_ BitVec 8))) Bool
  (and (bvule #x00 x) (bvule x #x01)))

(declare-const dummy u8_bit)

;; to_rep
(declare-fun to_rep (u8_bit) (_ BitVec 8))

;; of_rep
(declare-fun of_rep ((_ BitVec 8)) u8_bit)

;; inversion_axiom
(assert
  (forall ((x u8_bit)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
(assert
  (forall ((x u8_bit)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
(assert
  (forall ((x (_ BitVec 8)))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-datatypes ((map__ref 0))
  (((map__refqtmk (map__content (Array Int u8_bit))))))

;; bits_12_to_u16
(declare-fun bits_12_to_u16 ((Array Int u8_bit)) (_ BitVec 16))

;; bits_12_to_u16__function_guard
(declare-fun bits_12_to_u16__function_guard ((_ BitVec 16)
  (Array Int u8_bit)) Bool)

(declare-sort u16 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 16))

(declare-const dummy1 u16)

;; bits_12_to_u16__post_axiom
(assert
  (forall ((param__x (Array Int u8_bit)))
    (! (let ((result (bits_12_to_u16 param__x)))
         (=>
           (bits_12_to_u16__function_guard result param__x)
           (bvult result #x1000))) :pattern ((bits_12_to_u16 param__x)) )))

;; bits_12_to_u16__def_axiom
(assert
  (forall ((param__x (Array Int u8_bit)))
    (! (= (bits_12_to_u16 param__x) (bvadd (bvadd (bvadd (bvadd (bvadd (bvadd (bvadd (bvadd (bvadd (bvadd (bvadd ((_ zero_extend 8) 
    (to_rep
      (select param__x 0))) (bvmul ((_ zero_extend 8) (to_rep
                                                        (select param__x 1))) #x0002)) (bvmul ((_ zero_extend 8) 
    (to_rep
      (select param__x 2))) #x0004)) (bvmul ((_ zero_extend 8) (to_rep
                                                                 (select param__x 3))) #x0008)) (bvmul ((_ zero_extend 8) 
    (to_rep
      (select param__x 4))) #x0010)) (bvmul ((_ zero_extend 8) (to_rep
                                                                 (select param__x 5))) #x0020)) (bvmul ((_ zero_extend 8) 
    (to_rep
      (select param__x 6))) #x0040)) (bvmul ((_ zero_extend 8) (to_rep
                                                                 (select param__x 7))) #x0080)) (bvmul ((_ zero_extend 8) 
    (to_rep
      (select param__x 8))) #x0100)) (bvmul ((_ zero_extend 8) (to_rep
                                                                 (select param__x 9))) #x0200)) (bvmul ((_ zero_extend 8) 
    (to_rep
      (select param__x 10))) #x0400)) (bvmul ((_ zero_extend 8) (to_rep
                                                                  (select param__x 11))) #x0800))) :pattern (
    (bits_12_to_u16
      param__x)) )))

(declare-const x (_ BitVec 16))

(declare-const t (_ BitVec 16))

(declare-sort t1 0)

;; in_range
(define-fun in_range1 ((x1 (_ BitVec 16))) Bool
  (and (bvule #x0000 x1) (bvule x1 #x0D00)))

(declare-const dummy2 t1)

;; temp_____aggregate_def_2557
(declare-fun temp_____aggregate_def_2557 ((_ BitVec 8)
  (_ BitVec 8)
  (_ BitVec 8)
  (_ BitVec 8)
  (_ BitVec 8)
  (_ BitVec 8)
  (_ BitVec 8)
  (_ BitVec 8)
  (_ BitVec 8)
  (_ BitVec 8)
  (_ BitVec 8)
  (_ BitVec 8)) (Array Int u8_bit))

;; t__def_axiom
(assert (= t x))

;; def_axiom
(assert
  (forall ((temp___2559 (_ BitVec 8)) (temp___2560 (_ BitVec 8)) (temp___2561 (_ BitVec 8)) (temp___2562 (_ BitVec 8)) (temp___2563 (_ BitVec 8)) (temp___2564 (_ BitVec 8)) (temp___2565 (_ BitVec 8)) (temp___2566 (_ BitVec 8)) (temp___2567 (_ BitVec 8)) (temp___2568 (_ BitVec 8)) (temp___2569 (_ BitVec 8)) (temp___2570 (_ BitVec 8)))
    (let ((temp___2558 (temp_____aggregate_def_2557
                         temp___2559
                         temp___2560
                         temp___2561
                         temp___2562
                         temp___2563
                         temp___2564
                         temp___2565
                         temp___2566
                         temp___2567
                         temp___2568
                         temp___2569
                         temp___2570)))
      (and
        (and
          (=>
            (in_range temp___2559)
            (= (to_rep (select temp___2558 0)) temp___2559))
          (=>
            (in_range temp___2560)
            (= (to_rep (select temp___2558 1)) temp___2560)))
        (and
          (and
            (and
              (and
                (=>
                  (in_range temp___2561)
                  (= (to_rep (select temp___2558 2)) temp___2561))
                (=>
                  (in_range temp___2562)
                  (= (to_rep (select temp___2558 3)) temp___2562)))
              (=>
                (in_range temp___2563)
                (= (to_rep (select temp___2558 4)) temp___2563)))
            (and
              (=>
                (in_range temp___2564)
                (= (to_rep (select temp___2558 5)) temp___2564))
              (=>
                (in_range temp___2565)
                (= (to_rep (select temp___2558 6)) temp___2565))))
          (and
            (and
              (and
                (=>
                  (in_range temp___2566)
                  (= (to_rep (select temp___2558 7)) temp___2566))
                (=>
                  (in_range temp___2567)
                  (= (to_rep (select temp___2558 8)) temp___2567)))
              (=>
                (in_range temp___2568)
                (= (to_rep (select temp___2558 9)) temp___2568)))
            (and
              (=>
                (in_range temp___2569)
                (= (to_rep (select temp___2558 10)) temp___2569))
              (=>
                (in_range temp___2570)
                (= (to_rep (select temp___2558 11)) temp___2570)))))))))

;; Goal def'vc
;; File "mlkem.adb", line 959, characters 0-0
(assert
  (not
  (=>
    (in_range1 x)
    (=>
      (= x t)
      (=>
        (bvult t #x0D01)
        (forall ((o (_ BitVec 16)))
          (=>
            (ite (< 11 16) (= o (bvlshr t ((_ int2bv 16) 11))) (= o #x0000))
            (forall ((o1 (_ BitVec 16)))
              (=>
                (ite (< 10 16)
                  (= o1 (bvlshr t ((_ int2bv 16) 10)))
                  (= o1 #x0000))
                (forall ((o2 (_ BitVec 16)))
                  (=>
                    (ite (< 9 16)
                      (= o2 (bvlshr t ((_ int2bv 16) 9)))
                      (= o2 #x0000))
                    (forall ((o3 (_ BitVec 16)))
                      (=>
                        (ite (< 8 16)
                          (= o3 (bvlshr t ((_ int2bv 16) 8)))
                          (= o3 #x0000))
                        (forall ((o4 (_ BitVec 16)))
                          (=>
                            (ite (< 7 16)
                              (= o4 (bvlshr t ((_ int2bv 16) 7)))
                              (= o4 #x0000))
                            (forall ((o5 (_ BitVec 16)))
                              (=>
                                (ite (< 6 16)
                                  (= o5 (bvlshr t ((_ int2bv 16) 6)))
                                  (= o5 #x0000))
                                (forall ((o6 (_ BitVec 16)))
                                  (=>
                                    (ite (< 5 16)
                                      (= o6 (bvlshr t ((_ int2bv 16) 5)))
                                      (= o6 #x0000))
                                    (forall ((o7 (_ BitVec 16)))
                                      (=>
                                        (ite (< 4 16)
                                          (= o7 (bvlshr t ((_ int2bv 16) 4)))
                                          (= o7 #x0000))
                                        (forall ((o8 (_ BitVec 16)))
                                          (=>
                                            (ite (< 3 16)
                                              (= o8 (bvlshr t ((_ int2bv 16) 3)))
                                              (= o8 #x0000))
                                            (forall ((o9 (_ BitVec 16)))
                                              (=>
                                                (ite (< 2 16)
                                                  (= o9 (bvlshr t ((_ int2bv 16) 2)))
                                                  (= o9 #x0000))
                                                (forall ((o10 (_ BitVec 16)))
                                                  (=>
                                                    (ite (< 1 16)
                                                      (= o10 (bvlshr 
                                                      t ((_ int2bv 16) 1)))
                                                      (= o10 #x0000))
                                                    (forall ((mlkem__zq_to_bits_12__result (Array Int u8_bit)))
                                                      (=>
                                                        (= mlkem__zq_to_bits_12__result 
                                                        (temp_____aggregate_def_2557
                                                          ((_ extract 7 0) (bvand 
                                                          t #x0001))
                                                          ((_ extract 7 0) (bvand o10 #x0001))
                                                          ((_ extract 7 0) (bvand o9 #x0001))
                                                          ((_ extract 7 0) (bvand o8 #x0001))
                                                          ((_ extract 7 0) (bvand o7 #x0001))
                                                          ((_ extract 7 0) (bvand o6 #x0001))
                                                          ((_ extract 7 0) (bvand o5 #x0001))
                                                          ((_ extract 7 0) (bvand o4 #x0001))
                                                          ((_ extract 7 0) (bvand o3 #x0001))
                                                          ((_ extract 7 0) (bvand o2 #x0001))
                                                          ((_ extract 7 0) (bvand o1 #x0001))
                                                          ((_ extract 7 0) (bvand o #x0001))))
                                                        (=>
                                                          (forall ((mlkem__zq_to_bits_12__result1 (Array Int u8_bit)))
                                                            (bits_12_to_u16__function_guard
                                                              (bits_12_to_u16
                                                                mlkem__zq_to_bits_12__result1)
                                                              mlkem__zq_to_bits_12__result1))
                                                          (bvult (bits_12_to_u16
                                                                   mlkem__zq_to_bits_12__result) #x0D01)))))))))))))))))))))))))))))))

(check-sat)
(exit)
