;; produced by cvc4_16_smtcomp.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic ALL)
(set-info :source |
Generated by: Rod Chapman
Generated on: 2024-02-26
Generator: GNATProve 13.2.1 and Why3 1.5.0
Application: Proof of LibMLKEM Cryptographic Library
Target solver: CVC4, CVC5, Z3
Publications: https://github.com/awslabs/LibMLKEM
|)
(set-info :license "https://www.apache.org/licenses/LICENSE-2.0")
(set-info :category "industrial")
(set-info :status unsat)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ((int__ref 0))
  (((int__refqtmk (int__content Int)))))

;; nth
(declare-fun nth ((_ BitVec 16)
  Int) Bool)

;; lsr
(declare-fun lsr ((_ BitVec 16)
  Int) (_ BitVec 16))

;; asr
(declare-fun asr ((_ BitVec 16)
  Int) (_ BitVec 16))

;; lsl
(declare-fun lsl ((_ BitVec 16)
  Int) (_ BitVec 16))

;; abs
(define-fun abs1 ((x Int)) Int
  (ite (<= 0 x) x (- x)))

;; Abs_le
(assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
(assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
(assert
  (forall ((x Int) (y Int) (q Int))
    (=>
      (< 0 y)
      (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
(assert
  (forall ((x Int) (y Int))
    (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
(assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
(assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
(assert
  (forall ((y Int))
    (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

;; pow2
(declare-fun pow2 (Int) Int)

(declare-const two_power_size_minus_one Int)

;; two_power_size_minus_one_val
(assert (= two_power_size_minus_one (pow2 (- 16 1))))

;; to_int
(define-fun to_int1 ((x (_ BitVec 16))) Int
  (ite (bvsge x (_ bv0 16)) (bv2nat x) (- (- 65536 (bv2nat x)))))

;; lsr_bv_is_lsr
(assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
    (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
(assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
    (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
(assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
    (= (bvshl x n) (lsl x (bv2nat n)))))

;; nth_bv
(declare-fun nth_bv ((_ BitVec 16)
  (_ BitVec 16)) Bool)

;; nth_bv_def
(assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
    (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))

;; Nth_bv_is_nth
(assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
    (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
(assert
  (forall ((x (_ BitVec 16)) (i Int))
    (=>
      (and (<= 0 i) (< i 65536))
      (= (nth_bv x ((_ int2bv 16) i)) (nth x i)))))

(declare-datatypes ((t__ref 0))
  (((t__refqtmk (t__content (_ BitVec 16))))))

;; min
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; max
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; Min_r
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

;; div
(declare-fun div1 (Int
  Int) Int)

;; mod
(declare-fun mod1 (Int
  Int) Int)

;; Div_mod
(assert
  (forall ((x Int) (y Int))
    (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
(assert
  (forall ((x Int) (y Int))
    (=>
      (not (= y 0))
      (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
(assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
(assert
  (forall ((x Int) (y Int))
    (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
(assert
  (forall ((x Int) (y Int))
    (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
(assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
(assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=>
         (and (< 0 x) (and (<= 0 y) (<= 0 z)))
         (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                                  (+ (* x y) z)
                                                                  x)) )))

;; Mod_mult
(assert
  (forall ((x Int) (y Int) (z Int))
    (! (=>
         (and (< 0 x) (and (<= 0 y) (<= 0 z)))
         (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1
                                                            (+ (* x y) z)
                                                            x)) )))

;; mod
(define-fun mod2 ((x Int) (y Int)) Int
  (ite (or (and (< 0 x) (< 0 y)) (and (< x 0) (< y 0)))
    (mod1 x y)
    (ite (= (mod1 x y) 0) 0 (+ (mod1 x y) y))))

;; mod2
(define-fun mod21 ((x Int) (y Int)) Int
  (let ((r (mod x y))) (ite (<= 0 y) r (ite (= r 0) 0 (+ r y)))))

;; Mod_Unique
(assert
  (forall ((x Int) (y Int)) (=> (not (= y 0)) (= (mod2 x y) (mod21 x y)))))

;; oadd
(declare-fun oadd ((_ BitVec 16)
  (_ BitVec 16)) (_ BitVec 16))

;; oadd__function_guard
(declare-fun oadd__function_guard ((_ BitVec 16)
  (_ BitVec 16)
  (_ BitVec 16)) Bool)

(declare-sort t 0)

;; in_range
(define-fun in_range ((x (_ BitVec 16))) Bool
  (and (bvule #x0000 x) (bvule x #x0D00)))

(declare-const dummy t)

;; oadd__post_axiom
(assert
  (forall ((param__left (_ BitVec 16)) (param__right (_ BitVec 16)))
    (! (=>
         (and (in_range param__left) (in_range param__right))
         (let ((result (oadd param__left param__right)))
           (=>
             (oadd__function_guard result param__left param__right)
             (and
               (= result ((_ int2bv 16) (mod2
                                          (+ (bv2nat param__left) (bv2nat param__right))
                                          3329)))
               (in_range result))))) :pattern ((oadd
                                                 param__left
                                                 param__right)) )))

;; osubtract
(declare-fun osubtract ((_ BitVec 16)
  (_ BitVec 16)) (_ BitVec 16))

;; osubtract__function_guard
(declare-fun osubtract__function_guard ((_ BitVec 16)
  (_ BitVec 16)
  (_ BitVec 16)) Bool)

;; osubtract__post_axiom
(assert
  (forall ((param__left (_ BitVec 16)) (param__right (_ BitVec 16)))
    (! (=>
         (and (in_range param__left) (in_range param__right))
         (let ((result (osubtract param__left param__right)))
           (=>
             (osubtract__function_guard result param__left param__right)
             (and
               (= result ((_ int2bv 16) (mod2
                                          (- (bv2nat param__left) (bv2nat param__right))
                                          3329)))
               (in_range result))))) :pattern ((osubtract
                                                 param__left
                                                 param__right)) )))

;; omultiply
(declare-fun omultiply ((_ BitVec 16)
  (_ BitVec 16)) (_ BitVec 16))

;; omultiply__function_guard
(declare-fun omultiply__function_guard ((_ BitVec 16)
  (_ BitVec 16)
  (_ BitVec 16)) Bool)

;; omultiply__post_axiom
(assert
  (forall ((param__left (_ BitVec 16)) (param__right (_ BitVec 16)))
    (! (=>
         (and (in_range param__left) (in_range param__right))
         (let ((result (omultiply param__left param__right)))
           (=>
             (omultiply__function_guard result param__left param__right)
             (and
               (= result ((_ int2bv 16) (mod2
                                          (* (bv2nat param__left) (bv2nat param__right))
                                          3329)))
               (in_range result))))) :pattern ((omultiply
                                                 param__left
                                                 param__right)) )))

;; to_rep
(declare-fun to_rep (t) (_ BitVec 16))

;; of_rep
(declare-fun of_rep ((_ BitVec 16)) t)

;; inversion_axiom
(assert
  (forall ((x t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
(assert (forall ((x t)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
(assert
  (forall ((x (_ BitVec 16)))
    (! (let ((y (bvurem x #x0D01)))
         (=> (in_range y) (= (to_rep (of_rep x)) y))) :pattern ((to_rep
                                                                  (of_rep x))) )))

(declare-datatypes ((map__ref 0))
  (((map__refqtmk (map__content (Array Int t))))))

(declare-const zeta (_ BitVec 16))

(declare-const start Int)

(declare-const r238b Int)

(declare-sort tinteger_32B 0)

;; in_range
(define-fun in_range1 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

(declare-const dummy1 tinteger_32B)

(declare-sort index_256 0)

;; in_range
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

(declare-const dummy2 index_256)

;; power
(declare-fun power (Int
  Int) Int)

;; Power_0
(assert (forall ((x Int)) (= (power x 0) 1)))

;; Power_s
(assert
  (forall ((x Int) (n Int))
    (=> (<= 0 n) (= (power x (+ n 1)) (* x (power x n))))))

;; Power_s_alt
(assert
  (forall ((x Int) (n Int))
    (=> (< 0 n) (= (power x n) (* x (power x (- n 1)))))))

;; Power_1
(assert (forall ((x Int)) (= (power x 1) x)))

;; Power_sum
(assert
  (forall ((x Int) (n Int) (m Int))
    (=>
      (<= 0 n)
      (=> (<= 0 m) (= (power x (+ n m)) (* (power x n) (power x m)))))))

;; Power_mult
(assert
  (forall ((x Int) (n Int) (m Int))
    (=> (<= 0 n) (=> (<= 0 m) (= (power x (* n m)) (power (power x n) m))))))

;; Power_comm1
(assert
  (forall ((x Int) (y Int))
    (=>
      (= (* x y) (* y x))
      (forall ((n Int))
        (=> (<= 0 n) (= (* (power x n) y) (* y (power x n))))))))

;; Power_comm2
(assert
  (forall ((x Int) (y Int))
    (=>
      (= (* x y) (* y x))
      (forall ((n Int))
        (=> (<= 0 n) (= (power (* x y) n) (* (power x n) (power y n))))))))

;; Power_non_neg
(assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (<= 0 y)) (<= 0 (power x y)))))

;; Power_pos
(assert
  (forall ((x Int) (y Int)) (=> (and (< 0 x) (<= 0 y)) (< 0 (power x y)))))

;; Power_monotonic
(assert
  (forall ((x Int) (n Int) (m Int))
    (=> (and (< 0 x) (and (<= 0 n) (<= n m))) (<= (power x n) (power x m)))))

(declare-sort len_t 0)

;; in_range
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

(declare-const dummy3 len_t)

;; dynamic_invariant
(define-fun dynamic_invariant ((temp___expr_981 Int) (temp___is_init_977 Bool) (temp___skip_constant_978 Bool) (temp___do_toplevel_979 Bool) (temp___do_typ_inv_980 Bool)) Bool
  (and
    (in_range3 temp___expr_981)
    (=>
      (= temp___do_toplevel_979 true)
      (=>
        (= temp___is_init_977 true)
        (exists ((i Int))
          (and
            (and (<= 1 i) (<= i 7))
            (= temp___expr_981 (let ((temp___983 2)) (power temp___983 i)))))))))

;; Goal def'vc
;; File "mlkem.adb", line 1643, characters 0-0
(assert
  (not
  (forall ((len Int) (t1 (_ BitVec 16)))
    (=>
      (dynamic_invariant len true false true true)
      (=>
        (in_range zeta)
        (=>
          (in_range2 start)
          (=>
            (and (<= start 252) (<= (+ start (* 2 len)) 256))
            (=>
              (in_range t1)
              (=>
                (= (+ start (- len 1)) r238b)
                (=>
                  (in_range1 r238b)
                  (let ((temp___3046 start))
                    (forall ((j Int))
                      (=>
                        (= j temp___3046)
                        (=>
                          (= (and (ite (<= temp___3046 j) true false) 
                          (ite (<= j r238b)
                            true
                            false)) true)
                          (forall ((f_hat (Array Int t)) (t2 (_ BitVec 16)) (j1 Int))
                            (=>
                              (= (and (ite (in_range t2) true false) 
                              (ite (and (<= start j1) (<= j1 r238b))
                                true
                                false)) true)
                              (=>
                                (and (<= 0 j1) (<= j1 255))
                                (forall ((o (_ BitVec 16)))
                                  (=>
                                    (= (to_rep (select f_hat j1)) o)
                                    (forall ((t3 (_ BitVec 16)))
                                      (=>
                                        (= t3 o)
                                        (let ((o1 (+ j1 len)))
                                          (=>
                                            (in_range1 o1)
                                            (=>
                                              (and (<= 0 o1) (<= o1 255))
                                              (forall ((o2 (_ BitVec 16)))
                                                (=>
                                                  (= (to_rep
                                                       (select f_hat o1)) o2)
                                                  (let ((o3 (oadd t3 o2)))
                                                    (=>
                                                      (and
                                                        (oadd__function_guard
                                                          o3
                                                          t3
                                                          o2)
                                                        (and
                                                          (in_range o3)
                                                          (= o3 ((_ int2bv 16) 
                                                          (mod2
                                                            (+ (bv2nat t3) (bv2nat o2))
                                                            3329)))))
                                                      (forall ((o4 t))
                                                        (=>
                                                          (= (to_rep o4) o3)
                                                          (=>
                                                            (and
                                                              (<= 0 j1)
                                                              (<= j1 255))
                                                            (forall ((f_hat1 (Array Int t)))
                                                              (=>
                                                                (= f_hat1 (store f_hat j1 o4))
                                                                (let ((o5 (+ j1 len)))
                                                                  (=>
                                                                    (in_range1
                                                                    o5)
                                                                    (=>
                                                                    (and
                                                                    (<= 0 o5)
                                                                    (<= o5 255))
                                                                    (forall 
                                                                    ((o6 (_ BitVec 16)))
                                                                    (=>
                                                                    (= 
                                                                    (to_rep
                                                                    (select f_hat1 o5)) o6)
                                                                    (let ((o7 
                                                                    (osubtract
                                                                    o6
                                                                    t3)))
                                                                    (=>
                                                                    (and
                                                                    (osubtract__function_guard
                                                                    o7
                                                                    o6
                                                                    t3)
                                                                    (and
                                                                    (in_range
                                                                    o7)
                                                                    (= o7 ((_ int2bv 16) 
                                                                    (mod2
                                                                    (- (bv2nat o6) (bv2nat t3))
                                                                    3329)))))
                                                                    (let ((o8 
                                                                    zeta))
                                                                    (let ((o9 
                                                                    (omultiply
                                                                    o8
                                                                    o7)))
                                                                    (=>
                                                                    (and
                                                                    (omultiply__function_guard
                                                                    o9
                                                                    o8
                                                                    o7)
                                                                    (and
                                                                    (in_range
                                                                    o9)
                                                                    (= o9 ((_ int2bv 16) 
                                                                    (mod2
                                                                    (* (bv2nat o8) (bv2nat o7))
                                                                    3329)))))
                                                                    (forall 
                                                                    ((o10 t))
                                                                    (=>
                                                                    (= 
                                                                    (to_rep
                                                                    o10) o9)
                                                                    (in_range1
                                                                    (+ j1 len)))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
